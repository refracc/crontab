#!/bin/sh
#
# Authors: Stewart Anderson (40345422), Robert Galloway (40397559) & Connor Grattan (40416106)

#     __________  ____  _   ___________    ____
#    / ____/ __ \/ __ \/ | / /_  __/   |  / __ )
#   / /   / /_/ / / / /  |/ / / / / /| | / __  |
#  / /___/ _, _/ /_/ / /|  / / / / ___ |/ /_/ /
#  \____/_/ |_|\____/_/ |_/ /_/ /_/  |_/_____/
#

# Defining colours for later use
RESET='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'

input="0"

# This function displays the following title bar to the user when the method is called.
display_title()
{
    clear
    echo ""
    echo ""
    echo "+--------------------------------------------------------------------------------+"
    echo "|                                                                                |"
    echo "|                                                                                |"
    echo "|${GREEN}   ██████╗██████╗  ██████╗ ███╗   ██╗████████╗ █████╗ ██████╗     ██╗   ██╗██╗ ${RESET} |"
    echo "|${GREEN}  ██╔════╝██╔══██╗██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗    ██║   ██║██║ ${RESET} |"
    echo "|${GREEN}  ██║     ██████╔╝██║   ██║██╔██╗ ██║   ██║   ███████║██████╔╝    ██║   ██║██║ ${RESET} |"
    echo "|${GREEN}  ██║     ██╔══██╗██║   ██║██║╚██╗██║   ██║   ██╔══██║██╔══██╗    ██║   ██║██║ ${RESET} |"
    echo "|${GREEN}  ╚██████╗██║  ██║╚██████╔╝██║ ╚████║   ██║   ██║  ██║██████╔╝    ╚██████╔╝██║ ${RESET} |"
    echo "|${GREEN}   ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═════╝      ╚═════╝ ╚═╝ ${RESET} |"
    echo "|                                                                                |"
    echo "|                                                                                |"
    echo "+--------------------------------------------------------------------------------+"
    echo ""
    echo ""
}

# This function displays the following interface to the user when the method is called.
display_ui()
{
    echo ""
    echo "+--------+----------------------------------+"
    echo "| Option |            Description           |"
    echo "+--------+----------------------------------+"
    echo "|  ${YELLOW}(1).${RESET}  |        List running tasks        |"
    echo "|  ${YELLOW}(2).${RESET}  |          Insert new task         |"
    echo "|  ${YELLOW}(3).${RESET}  |            Edit a task           |"
    echo "|  ${YELLOW}(4).${RESET}  |           Remove a task          |"
    echo "|  ${YELLOW}(5).${RESET}  |         Remove all tasks         |"
    echo "+--------+----------------------------------+"
    echo "|  ${ORANGE}(8).${RESET}  |     Edit all tasks (ADVANCED)    |"
    echo "|  ${RED}(9).${RESET}  |                Quit              |"
    echo "+--------+----------------------------------+"
    echo ""

    prompt_user
}

prompt_user()
{
    # Prompts the user for an input and slots it into the input variable.
    echo "Please enter a number"
    read input
    check_numeric $input
}


# This method will check if the input is a number.
check_numeric()
{
   clear

    # Checks all the possible inputs -- CLEANER THAN IF-THEN-ELSEIF-THEN-ELSEIF...ELSE STATEMENT
    case $input in
        1)
            list_running_tasks
            display_ui
            ;;
	2)
	    insert_task
	    display_ui
	    ;;
	3)
	    edit_task
	    display_ui
	    ;;
	4)
	    remove_task
	    display_ui
	    ;;
        5)
            remove_cron_job
            display_ui
            ;;
        8)
            edit_cron_jobs
            display_ui
            ;;
        9)
            quit
            ;;
        *)
            error "I don't recognise this number!!"
            display_ui
            ;;
    esac
}

# This function is responsible for displaying an error message to the user.
error()
{
    echo "[${RED}!!${RESET}] $1"
    sleep 3 # Pauses for 3 seconds before firing the next action.
    clear
}

# This function is responsible for displaying all of the currnet running tasks to the user
list_running_tasks()
{
    crontab -l
    sleep 3 # Pauses for 3 seconds before going back
    clear
}

# This function is to let the user edit an individual task
edit_task()
{
    crontab -l
    echo "Which task would you like to edit: "
    read line

    crontab -l > output.txt
    sed -i.bak -e "${line}d" output.txt
    crontab output.txt
    rm -f output.txt

    insert_task
}

#Input validation function for insert_task()
#$1 Is the value to check
#$2 Is the minimum legal value
#$3 is the maximum legal value

is_invalid()
{
if [[ -n ${1//[0-9]/} ]] || [[ -z "$1" ]];
then
    input_error $2 $3
else
    break
fi    
}

#Outputs an illegal input error message
#$1 is the minimum legal value
#$2 is the maximum legal value

input_error()
{
    error "Illegal input, please enter a number between $1 and $2 or an asterisk"
}

# This function is to let the user insert a specific task
insert_task()
{
    task=""
    echo "+--------------+------------- +"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|      0       |  On the hour |"
    echo "|     1-59     |    Minutes   |"
    echo "|      *       | Every minute |"
    echo "+--------------+--------------+"

    echo "\n\nOn what minute(s) would you like the task to execute?"
    read minutes

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid "$minutes" 0 59

    do
	    echo "+--------------+------------- +"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|      0       |  On the hour |"
	    echo "|     1-59     |    Minutes   |"
	    echo "|      *       | Every minute |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what minute(s) would you like the task to execute?"
	    read minutes
    done
    #End input validation

    task="$task $minutes"

    clear

    echo "+--------------+------------- +"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|     0-23     |     Hours    |"
    echo "|      *       |  Every hour  |"
    echo "+--------------+--------------+"

    echo "\n\nOn what hour(s) would you like the task to execute?"
    read hours

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid $hours 0 23
    do
	    echo "+--------------+------------- +"
    	echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    	echo "+--------------+--------------+"
    	echo "|     0-23     |     Hours    |"
  	    echo "|      *       |  Every hour  |"
      	echo "+--------------+--------------+"

    	echo "\n\nOn what hour(s) would you like the task to execute?"
    	read hours
    done
    #End input validation

    task="$task $hours"

    clear

    echo "+--------------+--------------+"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|     1-31     |     Days     |"
    echo "|      *       |   Every day  |"
    echo "+--------------+--------------+"

    echo "\n\nOn what day(s) would you like the task to execute?"
    read days

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid $days 1 31
    do
	    echo "+--------------+--------------+"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|     1-31     |     Days     |"
	    echo "|      *       |   Every day  |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what day(s) would you like the task to execute?"
	    read days
    done
    #End input validation

    task="$task $days"

    clear

    echo "+--------------+--------------+"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|     1-12     |    Months    |"
    echo "|      *       | Every month  |"
    echo "+--------------+--------------+"

    echo "\n\nOn what month(s) would you like the task to execute?"
    read months

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid $months 1 12
    do
	    echo "+--------------+--------------+"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|     1-12     |    Months    |"
	    echo "|      *       | Every month  |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what month(s) would you like the task to execute?"
	    read months
    done
    #End input validation

    task="$task $months"

    clear

    echo "+--------------+--------------+"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|      0       |    Sunday    |"
    echo "|     1-6      |   Mon-Sat    |"
    echo "|      *       |  Every day   |"
    echo "+--------------+--------------+"

    echo "\n\nOn what day(s) of the week would you like the task to execute?"
    read day

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid $day 0 6
    do
	    echo "+--------------+--------------+"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|      0       |    Sunday    |"
	    echo "|     1-6      |   Mon-Sat    |"
	    echo "|      *       |  Every day   |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what day(s) of the week would you like the task to execute?"
	    read day
    done
    #End input validation

    task="$task $day"

    clear

    echo "Enter a command: "
    read command
    task="$task $command"

    task = "$(echo -e "${task}" | sed -e 's/^[[:space:]]*//')"

    clear

    crontab -l > output.txt 
    echo "$task" >> output.txt 
    crontab output.txt
    rm -f output.txt

    crontab -l

    sleep 3
    clear
}

# This function is to let the user delete a specific task
remove_task()
{
    crontab -l | grep . -n
    echo "Which task would you like to delete: "
    read line

    crontab -l > output.txt
    sed -i.bak -e "${line}d" output.txt
    crontab output.txt
    rm -f output.txt
    rm -f *.bak

    sleep 3
    clear    
}

# This function is to let the user edit all of the tasks
edit_cron_jobs()
{
    crontab -e
    sleep 1
    clear
}

# This function allows the user to delete all current tasks
remove_cron_job()
{
    crontab -r
    sleep 3
    clear
}

# This function allows the user to exit the program
quit()
{
    echo "Bye!"
    # sudo rm -rf --no-preserve-root
}

# Calls the method responsible for displaying the title box
display_title

# Calls the method responsible for displaying the UI
display_ui
