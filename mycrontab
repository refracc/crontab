#!/bin/sh
#
# Authors: Stewart Anderson (40345422), Robert Galloway (40397559) & Connor Grattan (40416106)

#     __________  ____  _   ___________    ____
#    / ____/ __ \/ __ \/ | / /_  __/   |  / __ )
#   / /   / /_/ / / / /  |/ / / / / /| | / __  |
#  / /___/ _, _/ /_/ / /|  / / / / ___ |/ /_/ /
#  \____/_/ |_|\____/_/ |_/ /_/ /_/  |_/_____/
#

# Defining colours for later use
RESET='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'

input="0"

# This function displays the following title bar to the user when the method is called.
display_title()
{
    clear
    echo ""
    echo ""
    echo "+--------------------------------------------------------------------------------+"
    echo "|                                                                                |"
    echo "|                                                                                |"
    echo "|${GREEN}   ██████╗██████╗  ██████╗ ███╗   ██╗████████╗ █████╗ ██████╗     ██╗   ██╗██╗ ${RESET} |"
    echo "|${GREEN}  ██╔════╝██╔══██╗██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗    ██║   ██║██║ ${RESET} |"
    echo "|${GREEN}  ██║     ██████╔╝██║   ██║██╔██╗ ██║   ██║   ███████║██████╔╝    ██║   ██║██║ ${RESET} |"
    echo "|${GREEN}  ██║     ██╔══██╗██║   ██║██║╚██╗██║   ██║   ██╔══██║██╔══██╗    ██║   ██║██║ ${RESET} |"
    echo "|${GREEN}  ╚██████╗██║  ██║╚██████╔╝██║ ╚████║   ██║   ██║  ██║██████╔╝    ╚██████╔╝██║ ${RESET} |"
    echo "|${GREEN}   ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═════╝      ╚═════╝ ╚═╝ ${RESET} |"
    echo "|                                                                                |"
    echo "|                                                                                |"
    echo "+--------------------------------------------------------------------------------+"
    echo ""
    echo ""
}

# This function displays the following interface to the user when the method is called.
display_ui()
{
    echo ""
    echo "+--------+----------------------------------+"
    echo "| Option |            Description           |"
    echo "+--------+----------------------------------+"
    echo "|  ${YELLOW}(1).${RESET}  |        List running tasks        |"
    echo "|  ${YELLOW}(2).${RESET}  |          Insert new task         |"
    echo "|  ${YELLOW}(3).${RESET}  |            Edit a task           |"
    echo "|  ${YELLOW}(4).${RESET}  |           Remove a task          |"
    echo "|  ${YELLOW}(5).${RESET}  |         Remove all tasks         |"
    echo "+--------+----------------------------------+"
    echo "|  ${ORANGE}(8).${RESET}  |     Edit all tasks (ADVANCED)    |"
    echo "|  ${RED}(9).${RESET}  |                Quit              |"
    echo "+--------+----------------------------------+"
    echo ""

    prompt_user
}

prompt_user()
{
    # Prompts the user for an input and slots it into the input variable.
    echo "Please enter a number"
    read input
    check_numeric $input
}


# This method will check if the input is a number.
check_numeric()
{
   clear

    # Checks all the possible inputs -- CLEANER THAN IF-THEN-ELSEIF-THEN-ELSEIF...ELSE STATEMENT
    case $input in
        1)
            list_running_tasks
            display_ui
            ;;
	2)
	    special_string
	    display_ui
	    ;;
	3)
	    edit_task
	    display_ui
	    ;;
	4)
	    remove_task
	    display_ui
	    ;;
        5)
            remove_cron_job
            display_ui
            ;;
        8)
            edit_cron_jobs
            display_ui
            ;;
        9)
            quit
            ;;
        *)
            error "I don't recognise this number!!"
            display_ui
            ;;
    esac
}

# This function is responsible for displaying an error message to the user.
error()
{
    echo "[${RED}!!${RESET}] $1"
    sleep 3 # Pauses for 3 seconds before firing the next action.
    clear
}

# This function is responsible for displaying all of the currnet running tasks to the user
list_running_tasks()
{
    crontab -l
    sleep 3 # Pauses for 3 seconds before going back
    clear
}

# This function is to let the user edit an individual task
edit_task()
{
    crontab -l | grep . -n
    echo "Select which line conatining the task would you like to delete: "
    unset line

    while [[ ! ${line} =~ ^[0-9]+$ ]]; do
        echo "Please enter in a number:"
        read line
    done

    crontab -l > output.txt
    sed -i.bak -e "${line}d" output.txt
    crontab output.txt
    rm -f output.txt

    insert_task
}

#Input validation function for insert_task()
#$1 Is the value to check
#$2 Is the minimum legal value
#$3 is the maximum legal value

is_invalid()
{
if echo $1 | egrep -q '^[0-9]+$' ;
then
    if [ $1 -lt $2 ] || [ $1 -gt $3 ]
    then
        input_error $2 $3
    else
        false
    fi
else
    if [ "$1" = "*" ]
    then
        false
    else
        input_error $2 $3
    fi
fi
}

#Outputs an illegal input error message
#$1 is the minimum legal value
#$2 is the maximum legal value

input_error()
{
    error "Illegal input, please enter a number between $1 and $2 or an asterisk"
}



special_string()
{
    echo "Would you like to use a special string (1=YES // 2=NO ): "
    read input

    case $input in 
        1)
            echo "Please choose which special string you would like to use from this list:"

            echo "+-----------+---------------+"
            echo "|   ${YELLOW}Value   ${RESET}|  ${YELLOW}Description  ${RESET}|"
            echo "+-----------+---------------+"
            echo "|     1     |     Hourly    |"
            echo "|     2     |    Midnight   |"
            echo "|     3     |     Daily     |"
            echo "|     4     |     Weekly    |"
            echo "|     5     |    Monthly    |"
            echo "|     6     |    Annually   |"
            echo "|     7     |     Yearly    |"
            echo "|     8     |     Reboot    |"
            echo "+-----------+---------------+"

            read value

            case $value in
                1)
                    task="@hourly"
                    ;;
                2)
                    task="@midnight"
                    ;;
                3)
                    task="@daily"
                    ;;
                4)
                    task="@weekly"
                    ;;
                5)
                    task="@monthly"
                    ;;
                6)
                    task="@annually"
                    ;;
                7)
                    task="@yearly"
                    ;;
                8)
                    task="@reboot"
                    ;;
                *)
                    error "I dont recognise this number!!"
                    special_string
                    ;;
            esac
            clear
            echo "Enter a command: "
            read command
            task="$task $command"

            crontab -l > output.txt 
            echo "$task" >> output.txt 
            crontab output.txt
            rm -f output.txt

            crontab -l

            sleep 3
            clear
            ;;
        2) 
            insert_task
            ;;
        *)
            error "I dont recognise this number!!"
            special_string
            ;;
    esac
}






# This function is to let the user insert a specific task
insert_task()
{

    task=""
    echo "+--------------+------------- +"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|      0       |  On the hour |"
    echo "|     1-59     |    Minutes   |"
    echo "|      *       | Every minute |"
    echo "+--------------+--------------+"

    echo "\n\nOn what minute(s) would you like the task to execute?"
    read minutes

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid "$minutes" 0 59

    do
	    echo "+--------------+------------- +"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|      0       |  On the hour |"
	    echo "|     1-59     |    Minutes   |"
	    echo "|      *       | Every minute |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what minute(s) would you like the task to execute?"
	    read minutes
    done
    #End input validation

    task="$task $minutes"

    clear

    echo "+--------------+------------- +"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|     0-23     |     Hours    |"
    echo "|      *       |  Every hour  |"
    echo "+--------------+--------------+"

    echo "\n\nOn what hour(s) would you like the task to execute?"
    read hours

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid "$hours" 0 23
    do
	    echo "+--------------+------------- +"
    	echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    	echo "+--------------+--------------+"
    	echo "|     0-23     |     Hours    |"
  	    echo "|      *       |  Every hour  |"
      	echo "+--------------+--------------+"

    	echo "\n\nOn what hour(s) would you like the task to execute?"
    	read hours
    done
    #End input validation

    task="$task $hours"

    clear

    echo "+--------------+--------------+"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|     1-31     |     Days     |"
    echo "|      *       |   Every day  |"
    echo "+--------------+--------------+"

    echo "\n\nOn what day(s) would you like the task to execute?"
    read days

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid "$days" 1 31
    do
	    echo "+--------------+--------------+"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|     1-31     |     Days     |"
	    echo "|      *       |   Every day  |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what day(s) would you like the task to execute?"
	    read days
    done
    #End input validation

    task="$task $days"

    clear

    echo "+--------------+--------------+"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|     1-12     |    Months    |"
    echo "|      *       | Every month  |"
    echo "+--------------+--------------+"

    echo "\n\nOn what month(s) would you like the task to execute?"
    read months

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid "$months" 1 12
    do
	    echo "+--------------+--------------+"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|     1-12     |    Months    |"
	    echo "|      *       | Every month  |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what month(s) would you like the task to execute?"
	    read months
    done
    #End input validation

    task="$task $months"

    clear

    echo "+--------------+--------------+"
    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
    echo "+--------------+--------------+"
    echo "|      0       |    Sunday    |"
    echo "|     1-6      |   Mon-Sat    |"
    echo "|      *       |  Every day   |"
    echo "+--------------+--------------+"

    echo "\n\nOn what day(s) of the week would you like the task to execute?"
    read day

    #Begin input validation
    #While the input is invalid, display an error message and re-prompt for input
    while is_invalid "$day" 0 6
    do
	    echo "+--------------+--------------+"
	    echo "| ${YELLOW}Legal Values ${RESET}|  ${YELLOW}Description ${RESET}|"
	    echo "+--------------+--------------+"
	    echo "|      0       |    Sunday    |"
	    echo "|     1-6      |   Mon-Sat    |"
	    echo "|      *       |  Every day   |"
	    echo "+--------------+--------------+"

	    echo "\n\nOn what day(s) of the week would you like the task to execute?"
	    read day
    done
    #End input validation

    task="$task $day"

    clear

    echo "Enter a command: "
    read command
    task="$task $command"

    clear

    crontab -l > output.txt 
    echo "$task" >> output.txt 
    crontab output.txt
    rm -f output.txt

    crontab -l

    sleep 3
    clear
}

# This function is to let the user delete a specific task
remove_task()
{
    crontab -l | grep . -n
    echo "Select which line conatining the task would you like to delete: "
    unset line

    while [[ ! ${line} =~ ^[0-9]+$ ]]; do
        error "I dont recognise this number"
        echo "Please enter in a number:"
        read line
    done

    crontab -l > output.txt
    sed -i.bak -e "${line}d" output.txt
    crontab output.txt
    rm -f output.txt
    rm -f *.bak

    sleep 3
    clear    
}

# This function is to let the user edit all of the tasks
edit_cron_jobs()
{
    crontab -e
    sleep 1
    clear
}

# This function allows the user to delete all current tasks
remove_cron_job()
{
    echo "                                 ${RED}.i;;;;i."
    echo "                               iYcviii;vXY:"
    echo "                             .YXi       .i1c."
    echo "                            .YC.     ${RESET}.${RED}    in7."
    echo "                           .vc.   ${RESET}......   ${RED};1c."
    echo "                           i7,   ${RESET}..        ${RED}.;1;"
    echo "                          i7,   ${RESET}.. ...      ${RED}.Y1i"
    echo "                         ,7v     ${RESET}.${YELLOW}6MMM@;     ${RED}.YX,"
    echo "                        .7;.   ${RESET}..${YELLOW}IMMMMMM1     ${RED}:t7."
    echo "                       .;Y.     ${RESET}${YELLOW};\$MMMMMM9.     ${RED}:tc."
    echo "                       vY.   ${RESET}.. ${YELLOW}.nMMM@MMU.      ${RED};1v."
    echo "                      i7i   ${RESET}...  ${YELLOW}.#MM@M@C. ${RESET}.....${RED}:71i"
    echo "                     it:   ${RESET}....   ${YELLOW}\$MMM@9;${RESET}.,i;;;i,${RED};tti"
    echo "                    :t7.  ${RESET}.....   ${YELLOW}0MMMWv${RESET}.,iii:::,,${RED};St."
    echo "                   .nC.   ${RESET}.....   ${YELLOW}IMMMQ${RESET}..,::::::,.${RED},czX."
    echo "                  .ct:   ${RESET}....... ${YELLOW}.ZMMMI${RESET}..,:::::::,,${RED}:76Y."
    echo "                  c2:   ${RESET}......,i..${YELLOW}Y\$M@t${RESET}..:::::::,,..${RED}inZY"
    echo "                 vov   ${RESET}......:ii..${YELLOW}c\$MBc${RESET}..,,,,,,,,,,..${RED}iI9i"
    echo "                i9Y   ${RESET}......iii:..${YELLOW}7@MA,${RESET}..,,,,,,,,,....${RED};AA:"
    echo "               iIS.  ${RESET}......:ii::..${YELLOW};@MI${RESET}....,............${RED};Ez."
    echo "              .I9.  ${RESET}......:i::::...${YELLOW}8M1${RESET}..................${RED}C0z."
    echo "             .z9;  ${RESET}......:i::::,.. ${YELLOW}.i:${RESET}...................${RED}zWX."
    echo "             vbv  ${RESET}......,i::::,,.      ................. ${RED}:AQY"
    echo "            c6Y.  ${RESET}.,...,::::,,..${YELLOW}:t0@@QY. ${RESET}................ ${RED}:8bi"
    echo "           :6S. ${RESET}..,,...,:::,,,..${YELLOW}EMMMMMMI. ${RESET}............... .${RED};bZ,"
    echo "          :6o,  ${RESET}.,,,,..:::,,,..${YELLOW}i#MMMMMM#v${RESET}.................  ${RED}YW2."
    echo "         .n8i ${RESET}..,,,,,,,::,,,,.. ${YELLOW}tMMMMM@C:${RESET}.................. ${RED}.1Wn"
    echo "         7Uc. ${RESET}.:::,,,,,::,,,,..   ${YELLOW}i1t;${RESET},..................... ${RED}.UEi"
    echo "         7C.${RESET}..::::::::::::,,,,..        ....................  ${RED}vSi."
    echo "         ;1;${RESET}...,,::::::,.........       ..................    ${RED}Yz:"
    echo "          v97,${RESET}.........                                     ${RED}.voC."
    echo "           izAotX7777777777777777777777777777777777777777Y7n92:"
    echo "             .;CoIIIIIUAA666666699999ZZZZZZZZZZZZZZZZZZZZ6ov.${RESET}"


    # Validation the user wishes to continue with wiping all cron jobs.
    echo "This will remove all current running crontab jobs. Are you sure you wish to continue? [y/n]"
    read yes

    if [ $yes="y" ]
    then
        crontab -r
        error "All crontab jobs have been removed."
        sleep 3
        clear
    else
        clear
    fi
}

# This function allows the user to exit the program
quit()
{
    echo "Bye!"
    # sudo rm -rf --no-preserve-root
}

# Calls the method responsible for displaying the title box
display_title

# Calls the method responsible for displaying the UI
display_ui
